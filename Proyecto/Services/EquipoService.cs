using BD.Data;
using BD.Models;
using Microsoft.EntityFrameworkCore;
using Proyecto.DTOS;
using Proyecto.Mapper;
using System.Linq.Expressions;

namespace Proyecto.Services
{
    public class EquipoService : IEquipoService
    {
        private readonly ProyectoContext _context;
        private readonly Map _mapper;

        public EquipoService(ProyectoContext context, Map mapper)
        {
            _context = context;
            _mapper = mapper;
        }

        public async Task<(List<EquipoDto> equipos, int totalCount)> GetEquiposPaginadosAsync(
            int page, int pageSize, 
            TipoEquipo? tipoFiltro = null, 
            int? empleadoFiltro = null, 
            EstadoEquipo? estadoFiltro = null, 
            string? search = null)
        {
            var query = _context.Equipos
                .Include(e => e.IdEmpleadoNavigation)
                .Include(e => e.IdMarcaNavigation)
                .AsQueryable();

            // Apply filters using automapped enum descriptions
            if (tipoFiltro.HasValue)
                query = query.Where(e => e.Tipo == tipoFiltro.Value.GetDescription());

            if (empleadoFiltro.HasValue)
                query = query.Where(e => e.IdEmpleado == empleadoFiltro.Value);

            if (estadoFiltro.HasValue)
                query = query.Where(e => e.Estado == estadoFiltro.Value.GetDescription());

            if (!string.IsNullOrWhiteSpace(search))
            {
                query = query.Where(e => 
                    e.Nombre.Contains(search) ||
                    e.Identificador!.Contains(search) ||
                    e.Serie.Contains(search) ||
                    e.IdMarcaNavigation.Nombre.Contains(search) ||
                    (e.IdEmpleadoNavigation != null && (e.IdEmpleadoNavigation.PrimerNombre + " " + e.IdEmpleadoNavigation.PrimerApellido).Contains(search)));
            }

            var totalCount = await query.CountAsync();
            
            var equipos = await query
                .OrderByDescending(e => e.FechaCommit)
                .Skip((page - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();

            var equiposDto = equipos.Select(e => _mapper.ToDtoWithNames(e)).ToList();

            return (equiposDto, totalCount);
        }

        public async Task<EquipoDto?> GetEquipoByIdAsync(int id)
        {
            var equipo = await _context.Equipos
                .Include(e => e.IdEmpleadoNavigation)
                .Include(e => e.IdMarcaNavigation)
                .FirstOrDefaultAsync(e => e.Id == id);

            return equipo != null ? _mapper.ToDtoWithNames(equipo) : null;
        }

        public async Task<Equipo> CreateEquipoAsync(EquipoDto equipoDto, object? specificData = null)
        {
            var equipo = _mapper.toEntity(equipoDto);
            equipo.FechaCommit = DateTime.Now;

            _context.Equipos.Add(equipo);
            await _context.SaveChangesAsync();

            // Create specific type entity based on equipment type
            await CreateSpecificTypeEntityAsync(equipo.Id, equipoDto.Tipo, specificData);

            // Refresh the entity to get the identifier generated by the trigger
            await _context.Entry(equipo).ReloadAsync();

            return equipo;
        }

        public async Task<Equipo?> UpdateEquipoAsync(int id, EquipoDto equipoDto, object? specificData = null)
        {
            var existingEquipo = await _context.Equipos.FindAsync(id);
            if (existingEquipo == null)
                return null;

            var oldTipo = EnumExtensions.GetEnumFromDescription<TipoEquipo>(existingEquipo.Tipo);
            
            // Use automapper to update properties
            var updatedEquipo = _mapper.toEntity(equipoDto);
            updatedEquipo.Id = id; // Preserve the ID
            updatedEquipo.FechaCommit = DateTime.Now;
            
            // Copy updated values to existing entity
            _context.Entry(existingEquipo).CurrentValues.SetValues(updatedEquipo);

            // If type changed, handle specific entities
            if (oldTipo != equipoDto.Tipo)
            {
                await DeleteSpecificTypeEntityAsync(id, oldTipo);
                await CreateSpecificTypeEntityAsync(id, equipoDto.Tipo, specificData);
            }
            else
            {
                // Update existing specific entity with new data
                await UpdateSpecificTypeEntityAsync(id, equipoDto.Tipo, specificData);
            }

            await _context.SaveChangesAsync();
            return existingEquipo;
        }

        public async Task<bool> DeleteEquipoAsync(int id)
        {
            var equipo = await _context.Equipos
                .Include(e => e.Herramienta)
                .Include(e => e.Vehiculos)
                .Include(e => e.Mobiliarios)
                .Include(e => e.Electronicos)
                .FirstOrDefaultAsync(e => e.Id == id);

            if (equipo == null)
                return false;

            // Delete specific type entities first
            var tipoEquipo = EnumExtensions.GetEnumFromDescription<TipoEquipo>(equipo.Tipo);
            await DeleteSpecificTypeEntityAsync(id, tipoEquipo);

            _context.Equipos.Remove(equipo);
            await _context.SaveChangesAsync();
            
            return true;
        }

        public async Task<List<Marca>> GetMarcasAsync()
        {
            return await _context.Marcas
                .OrderBy(m => m.Nombre)
                .ToListAsync();
        }

        public async Task<List<Empleado>> GetEmpleadosAsync()
        {
            return await _context.Empleados
                .Where(e => e.Estado == EstadoEmpleado.Activo.GetDescription())
                .OrderBy(e => e.PrimerNombre)
                .ToListAsync();
        }

        public async Task<bool> IdentificadorExistsAsync(string? identificador, int? excludeId = null)
        {
            if (string.IsNullOrEmpty(identificador))
                return false;

            return await _context.Equipos
                .AnyAsync(e => e.Identificador == identificador && 
                              (excludeId == null || e.Id != excludeId));
        }

        public async Task<bool> SerieExistsAsync(string serie, int? excludeId = null)
        {
            return await _context.Equipos
                .AnyAsync(e => e.Serie == serie && 
                              (excludeId == null || e.Id != excludeId));
        }

        public async Task<List<EquipoDto>> GetEquiposByTipoAsync(TipoEquipo tipo)
        {
            return await GetEquiposByFilterAsync(e => e.Tipo == tipo.GetDescription());
        }

        public async Task<List<EquipoDto>> GetEquiposByEmpleadoAsync(int empleadoId)
        {
            return await GetEquiposByFilterAsync(e => e.IdEmpleado == empleadoId);
        }

        private async Task<List<EquipoDto>> GetEquiposByFilterAsync(Expression<Func<Equipo, bool>> filter)
        {
            var equipos = await _context.Equipos
                .Include(e => e.IdEmpleadoNavigation)
                .Include(e => e.IdMarcaNavigation)
                .Where(filter)
                .OrderBy(e => e.Nombre)
                .ToListAsync();

            return equipos.Select(e => _mapper.ToDtoWithNames(e)).ToList();
        }

        public async Task<bool> CambiarEstadoEquipoAsync(int equipoId, EstadoEquipo nuevoEstado)
        {
            var equipo = await _context.Equipos.FindAsync(equipoId);
            if (equipo == null)
                return false;

            equipo.Estado = nuevoEstado.GetDescription();
            equipo.FechaCommit = DateTime.Now;
            
            await _context.SaveChangesAsync();
            return true;
        }

        public async Task<object?> GetSpecificDataAsync(int equipoId, TipoEquipo tipo)
        {
            switch (tipo)
            {
                case TipoEquipo.Herramienta:
                    var herramienta = await _context.Herramienta
                        .FirstOrDefaultAsync(h => h.IdEquipo == equipoId);
                    return herramienta != null ? new HerramientaDto { Material = herramienta.Material } : null;
                    
                case TipoEquipo.Vehiculo:
                    var vehiculo = await _context.Vehiculos
                        .FirstOrDefaultAsync(v => v.IdEquipo == equipoId);
                    return vehiculo != null ? new VehiculoDto 
                    { 
                        NoMotor = vehiculo.NoMotor,
                        Vin = vehiculo.Vin,
                        Cilindrada = vehiculo.Cilindrada,
                        Placa = vehiculo.Placa,
                        Modelo = vehiculo.Modelo
                    } : null;
                    
                case TipoEquipo.Mobiliario:
                    var mobiliario = await _context.Mobiliarios
                        .FirstOrDefaultAsync(m => m.IdEquipo == equipoId);
                    return mobiliario != null ? new MobiliarioDto 
                    { 
                        Material = mobiliario.Material,
                        Altura = mobiliario.Altura,
                        Ancho = mobiliario.Ancho,
                        Profundidad = mobiliario.Profundidad,
                        CantidadPiezas = mobiliario.CantidadPiezas
                    } : null;
                    
                case TipoEquipo.Electronico:
                    var electronico = await _context.Electronicos
                        .FirstOrDefaultAsync(e => e.IdEquipo == equipoId);
                    if (electronico != null)
                    {
                        var dto = new ElectronicoDto 
                        { 
                            Imei = electronico.Imei,
                            SistemaOperativo = electronico.SistemaOperativo
                        };
                        
                        if (!string.IsNullOrEmpty(electronico.Conectividad))
                            dto.Conectividad = EnumExtensions.GetEnumFromDescription<Conectividad>(electronico.Conectividad);
                        
                        if (!string.IsNullOrEmpty(electronico.Operador))
                            dto.Operador = EnumExtensions.GetEnumFromDescription<Operador>(electronico.Operador);
                        
                        return dto;
                    }
                    return null;
                    
                default:
                    return null;
            }
        }

        private async Task CreateSpecificTypeEntityAsync(int equipoId, TipoEquipo tipo, object? specificData = null)
        {
            switch (tipo)
            {
                case TipoEquipo.Herramienta:
                    var herramientaDto = specificData as HerramientaDto;
                    var herramienta = new Herramientum 
                    { 
                        IdEquipo = equipoId, 
                        Material = herramientaDto?.Material ?? "Sin especificar"
                    };
                    _context.Herramienta.Add(herramienta);
                    break;
                    
                case TipoEquipo.Vehiculo:
                    var vehiculoDto = specificData as VehiculoDto;
                    var vehiculo = new Vehiculo 
                    { 
                        IdEquipo = equipoId, 
                        NoMotor = vehiculoDto?.NoMotor ?? "Sin especificar",
                        Vin = vehiculoDto?.Vin ?? "Sin especificar",
                        Cilindrada = vehiculoDto?.Cilindrada ?? 0,
                        Placa = vehiculoDto?.Placa ?? "Sin especificar",
                        Modelo = vehiculoDto?.Modelo ?? DateTime.Now.Year
                    };
                    _context.Vehiculos.Add(vehiculo);
                    break;
                    
                case TipoEquipo.Mobiliario:
                    var mobiliarioDto = specificData as MobiliarioDto;
                    var mobiliario = new Mobiliario 
                    { 
                        IdEquipo = equipoId, 
                        Material = mobiliarioDto?.Material ?? "Sin especificar",
                        Altura = mobiliarioDto?.Altura ?? 0,
                        Ancho = mobiliarioDto?.Ancho ?? 0,
                        Profundidad = mobiliarioDto?.Profundidad ?? 0,
                        CantidadPiezas = mobiliarioDto?.CantidadPiezas
                    };
                    _context.Mobiliarios.Add(mobiliario);
                    break;
                    
                case TipoEquipo.Electronico:
                    var electronicoDto = specificData as ElectronicoDto;
                    var electronico = new Electronico 
                    { 
                        IdEquipo = equipoId,
                        Imei = electronicoDto?.Imei,
                        SistemaOperativo = electronicoDto?.SistemaOperativo,
                        Conectividad = electronicoDto?.Conectividad?.GetDescription(),
                        Operador = electronicoDto?.Operador?.GetDescription()
                    };
                    _context.Electronicos.Add(electronico);
                    break;
            }
            
            await _context.SaveChangesAsync();
        }

        private async Task UpdateSpecificTypeEntityAsync(int equipoId, TipoEquipo tipo, object? specificData)
        {
            if (specificData == null) return;

            switch (tipo)
            {
                case TipoEquipo.Herramienta:
                    var herramientaDto = specificData as HerramientaDto;
                    if (herramientaDto != null)
                    {
                        var herramienta = await _context.Herramienta
                            .FirstOrDefaultAsync(h => h.IdEquipo == equipoId);
                        if (herramienta != null)
                        {
                            herramienta.Material = herramientaDto.Material;
                        }
                    }
                    break;
                    
                case TipoEquipo.Vehiculo:
                    var vehiculoDto = specificData as VehiculoDto;
                    if (vehiculoDto != null)
                    {
                        var vehiculo = await _context.Vehiculos
                            .FirstOrDefaultAsync(v => v.IdEquipo == equipoId);
                        if (vehiculo != null)
                        {
                            vehiculo.NoMotor = vehiculoDto.NoMotor;
                            vehiculo.Vin = vehiculoDto.Vin;
                            vehiculo.Cilindrada = vehiculoDto.Cilindrada;
                            vehiculo.Placa = vehiculoDto.Placa;
                            vehiculo.Modelo = vehiculoDto.Modelo;
                        }
                    }
                    break;
                    
                case TipoEquipo.Mobiliario:
                    var mobiliarioDto = specificData as MobiliarioDto;
                    if (mobiliarioDto != null)
                    {
                        var mobiliario = await _context.Mobiliarios
                            .FirstOrDefaultAsync(m => m.IdEquipo == equipoId);
                        if (mobiliario != null)
                        {
                            mobiliario.Material = mobiliarioDto.Material;
                            mobiliario.Altura = mobiliarioDto.Altura;
                            mobiliario.Ancho = mobiliarioDto.Ancho;
                            mobiliario.Profundidad = mobiliarioDto.Profundidad;
                            mobiliario.CantidadPiezas = mobiliarioDto.CantidadPiezas;
                        }
                    }
                    break;
                    
                case TipoEquipo.Electronico:
                    var electronicoDto = specificData as ElectronicoDto;
                    if (electronicoDto != null)
                    {
                        var electronico = await _context.Electronicos
                            .FirstOrDefaultAsync(e => e.IdEquipo == equipoId);
                        if (electronico != null)
                        {
                            electronico.Imei = electronicoDto.Imei;
                            electronico.SistemaOperativo = electronicoDto.SistemaOperativo;
                            electronico.Conectividad = electronicoDto.Conectividad?.GetDescription();
                            electronico.Operador = electronicoDto.Operador?.GetDescription();
                        }
                    }
                    break;
            }
        }

        private async Task DeleteSpecificTypeEntityAsync(int equipoId, TipoEquipo tipo)
        {
            switch (tipo)
            {
                case TipoEquipo.Herramienta:
                    var herramienta = await _context.Herramienta
                        .FirstOrDefaultAsync(h => h.IdEquipo == equipoId);
                    if (herramienta != null)
                        _context.Herramienta.Remove(herramienta);
                    break;
                    
                case TipoEquipo.Vehiculo:
                    var vehiculo = await _context.Vehiculos
                        .FirstOrDefaultAsync(v => v.IdEquipo == equipoId);
                    if (vehiculo != null)
                        _context.Vehiculos.Remove(vehiculo);
                    break;
                    
                case TipoEquipo.Mobiliario:
                    var mobiliario = await _context.Mobiliarios
                        .FirstOrDefaultAsync(m => m.IdEquipo == equipoId);
                    if (mobiliario != null)
                        _context.Mobiliarios.Remove(mobiliario);
                    break;
                    
                case TipoEquipo.Electronico:
                    var electronico = await _context.Electronicos
                        .FirstOrDefaultAsync(e => e.IdEquipo == equipoId);
                    if (electronico != null)
                        _context.Electronicos.Remove(electronico);
                    break;
            }
        }
    }
}