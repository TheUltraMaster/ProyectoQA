@page "/reportes"
@using BD.Models
@using Proyecto.DTOS
@using Proyecto.Services
@using Proyecto.Components.Dialogs
@inject IReporteService ReporteService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@rendermode InteractiveServer
@attribute [Authorize(Policy="AdminOnly")]

<PageTitle>Reportes</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Gestión de Reportes</MudText>

    <MudPaper Class="pa-4">
        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="searchEmpleado" 
                              Label="Buscar por Empleado" 
                              Variant="Variant.Outlined" 
                              Adornment="Adornment.End" 
                              AdornmentIcon="Icons.Material.Filled.Search" 
                              OnKeyPress="OnSearchKeyPress"
                              Clearable="true"
                              OnClearButtonClick="ClearEmpleadoSearch" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="searchEquipo" 
                              Label="Buscar por Equipo" 
                              Variant="Variant.Outlined" 
                              Adornment="Adornment.End" 
                              AdornmentIcon="Icons.Material.Filled.Search" 
                              OnKeyPress="OnSearchKeyPress"
                              Clearable="true"
                              OnClearButtonClick="ClearEquipoSearch" />
            </MudItem>
            <MudItem xs="12" sm="4" md="2">
                <MudSelect T="int" @bind-Value="pageSize" 
                          Label="Elementos por página" 
                          Variant="Variant.Outlined"
                          OnSelectionChanged="OnPageSizeChanged">
                    <MudSelectItem T="int" Value="5">5</MudSelectItem>
                    <MudSelectItem T="int" Value="10">10</MudSelectItem>
                    <MudSelectItem T="int" Value="25">25</MudSelectItem>
                    <MudSelectItem T="int" Value="50">50</MudSelectItem>
                    <MudSelectItem T="int" Value="100">100</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="8" md="2" Class="d-flex align-center justify-end">
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="Icons.Material.Filled.Add"
                          OnClick="OpenCreateDialog"
                          Class="mr-2">
                    Crear Reporte
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Secondary" 
                          StartIcon="Icons.Material.Filled.Search"
                          OnClick="SearchReportes">
                    Buscar
                </MudButton>
            </MudItem>
        </MudGrid>

        <MudDataGrid T="ReporteDto" 
                     Items="@reportes" 
                     Loading="@loading"
                     Class="mt-4"
                     ReadOnly="true">
            <Columns>
                <PropertyColumn Property="x => x.Id" Title="ID" />
                <PropertyColumn Property="x => x.Observacion" Title="Observación">
                    <CellTemplate>
                        @if (!string.IsNullOrEmpty(context.Item.Observacion))
                        {
                            @(context.Item.Observacion.Length > 50 ? context.Item.Observacion.Substring(0, 50) + "..." : context.Item.Observacion)
                        }
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.NombreCausa" Title="Causa" />
                <PropertyColumn Property="x => x.NombreEquipo" Title="Equipo" />
                <PropertyColumn Property="x => x.NombreEmpleado" Title="Empleado" />
                <TemplateColumn CellClass="d-flex justify-end" Sortable="false">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" 
                                      Icon="@Icons.Material.Outlined.RemoveRedEye" 
                                      Color="Color.Info"
                                      OnClick="@(() => ViewReporte(context.Item))" 
                                      Title="Ver detalles" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>

        @if (totalCount > 0)
        {
            <MudPagination Count="@totalPages" 
                          @bind-Selected="@currentPage" 
                          Class="mt-4 d-flex justify-center" />
        }
    </MudPaper>
</MudContainer>

@code {
    private List<ReporteDto> reportes = new();
    private bool loading = true;
    private string searchEmpleado = string.Empty;
    private string searchEquipo = string.Empty;
    private int _currentPage = 1;
    private int currentPage 
    { 
        get => _currentPage; 
        set 
        { 
            if (_currentPage != value)
            {
                _currentPage = value;
                InvokeAsync(LoadData);
            }
        } 
    }
    private int pageSize = 10;
    private int totalCount = 0;
    private int totalPages = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        try
        {
            var result = await ReporteService.GetReportesPaginatedAsync(
                currentPage, 
                pageSize, 
                string.IsNullOrWhiteSpace(searchEmpleado) ? null : searchEmpleado,
                string.IsNullOrWhiteSpace(searchEquipo) ? null : searchEquipo);
            
            reportes = result.reportes;
            totalCount = result.totalCount;
            totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar reportes: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task SearchReportes()
    {
        _currentPage = 1;
        await LoadData();
    }


    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchReportes();
        }
    }

    private async Task ClearEmpleadoSearch()
    {
        searchEmpleado = string.Empty;
        await SearchReportes();
    }

    private async Task ClearEquipoSearch()
    {
        searchEquipo = string.Empty;
        await SearchReportes();
    }

    private async Task OnPageSizeChanged(int newPageSize)
    {
        pageSize = newPageSize;
        _currentPage = 1;
        await LoadData();
    }

    private async Task OpenCreateDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ReporteDto", new ReporteDto());

        var dialog = await DialogService.ShowAsync<CreateEditReporteDialog>("Crear Reporte", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
            Snackbar.Add("Reporte creado exitosamente", Severity.Success);
        }
    }

    private async Task ViewReporte(ReporteDto reporte)
    {
        var parameters = new DialogParameters();
        parameters.Add("ReporteDto", reporte);

        var dialog = await DialogService.ShowAsync<ReporteDetailsDialog>("Detalles del Reporte", parameters);
        await dialog.Result;
    }
}