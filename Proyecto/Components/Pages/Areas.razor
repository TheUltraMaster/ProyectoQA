@page "/areas"
@rendermode InteractiveServer
@attribute [Authorize(Policy="AdminOnly")]
@using BD.Models
@using Proyecto.DTOS
@using Proyecto.Services
@using Proyecto.Components.Dialogs
@using System.ComponentModel.DataAnnotations
@inject IAreaService AreaService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Gestión de Áreas</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudText Typo="Typo.h4" Class="mb-4">Gestión de Áreas</MudText>

    <MudCard Class="mb-4">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="4">
                    <MudTextField @bind-Value="searchTerm" 
                                  Label="Buscar por nombre" 
                                  Variant="Variant.Outlined" 
                                  Adornment="Adornment.End"
                                  AdornmentIcon="Icons.Material.Filled.Search"
                                  OnAdornmentClick="SearchAreas"
                                  OnKeyUp="OnSearchKeyUp" />
                </MudItem>
                <MudItem xs="12" md="2">
                    <MudSelect T="int" Value="pageSize" 
                               Label="Registros por página"
                               Variant="Variant.Outlined"
                               ValueChanged="OnPageSizeChanged">
                        <MudSelectItem Value="10">10</MudSelectItem>
                        <MudSelectItem Value="25">25</MudSelectItem>
                        <MudSelectItem Value="50">50</MudSelectItem>
                        <MudSelectItem Value="100">100</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6" Class="d-flex align-center justify-space-between">
                    <div>
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   StartIcon="Icons.Material.Filled.Search"
                                   OnClick="SearchAreas">
                            Buscar
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Secondary" 
                                   StartIcon="Icons.Material.Filled.Clear"
                                   OnClick="ClearSearch"
                                   Class="ml-2">
                            Limpiar
                        </MudButton>
                    </div>
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Success" 
                               StartIcon="Icons.Material.Filled.Add"
                               OnClick="OpenCreateAreaDialog"
                               Class="ml-4">
                        Nueva Área
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    <MudCard>
        <MudCardContent>
            @if (isLoading)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
            }
            else
            {
                <div class="mb-3 d-flex justify-space-between align-center">
                    <MudText Typo="Typo.h6">
                        Mostrando @GetDisplayRange() de @totalAreas áreas
                    </MudText>
                    <MudText Typo="Typo.body2" Class="text-muted">
                        Página @currentPage de @totalPages
                    </MudText>
                </div>
                
                <MudTable Items="@areas" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm">
                    <HeaderContent>
                        <MudTh>Nombre</MudTh>
                        <MudTh>Usuario Responsable</MudTh>
                        <MudTh>Empleados Asignados</MudTh>
                        <MudTh>Acciones</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
                        <MudTd DataLabel="Usuario Responsable">
                            @if (context.IdUsuarioNavigation != null)
                            {
                                <text>@context.IdUsuarioNavigation.Usuario1</text>
                            }
                            else
                            {
                                <text>Sin asignar</text>
                            }
                        </MudTd>
                        <MudTd DataLabel="Empleados Asignados">
                            <MudChip T="string" Color="Color.Info" Size="Size.Small">
                                @context.Empleados.Count empleados
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Acciones">
                            <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small">
                                <MudButton Color="Color.Primary" 
                                           StartIcon="Icons.Material.Filled.Edit"
                                           OnClick="() => OpenEditAreaDialog(context)"
                                           Size="Size.Small">
                                    Editar
                                </MudButton>
                            </MudButtonGroup>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                
                @if (totalPages > 1)
                {
                    <div class="d-flex justify-center mt-4">
                        <MudPagination Count="totalPages" 
                                       Selected="currentPage"
                                       SelectedChanged="OnPageChanged"
                                       Size="Size.Medium"
                                       ShowFirstButton="true"
                                       ShowLastButton="true"
                                       ShowPreviousButton="true"
                                       ShowNextButton="true" />
                    </div>
                }
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private List<Area> areas = new();
    private bool isLoading = true;
    private string searchTerm = "";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalAreas = 0;
    private int totalPages = 0;
    
    private DialogOptions dialogOptions = new()
    {
        CloseOnEscapeKey = true,
        MaxWidth = MaxWidth.Medium,
        FullWidth = true
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAreas();
    }

    private async Task LoadAreas()
    {
        await RefreshCurrentView();
    }

    private async Task SearchAreas()
    {
        currentPage = 1; // Reset to first page when searching
        await RefreshCurrentView();
    }

    private async Task ClearSearch()
    {
        searchTerm = "";
        currentPage = 1;
        await LoadAreas();
    }
    
    private async Task OnPageChanged(int page)
    {
        if (currentPage != page)
        {
            currentPage = page;
            await RefreshCurrentView();
        }
    }
    
    private async Task OnPageSizeChanged(int newPageSize)
    {
        if (pageSize != newPageSize)
        {
            pageSize = newPageSize;
            currentPage = 1; // Reset to first page when page size changes
            await RefreshCurrentView();
        }
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchAreas();
        }
    }
    
    private string GetDisplayRange()
    {
        if (totalAreas == 0) return "0";
        
        var start = (currentPage - 1) * pageSize + 1;
        var end = Math.Min(currentPage * pageSize, totalAreas);
        
        return $"{start}-{end}";
    }

    private async Task RefreshCurrentView()
    {
        isLoading = true;
        try
        {
            var result = await AreaService.GetAreasPagedAsync(currentPage, pageSize, searchTerm);
            areas = result.Areas;
            totalAreas = result.TotalCount;
            totalPages = (int)Math.Ceiling((double)totalAreas / pageSize);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar áreas: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    // Create Area Methods
    private async Task OpenCreateAreaDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("IsEditMode", false);

        var dialog = await DialogService.ShowAsync<CreateEditAreaDialog>("Crear Nueva Área", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshCurrentView();
        }
    }
    
    // Edit Area Methods
    private async Task OpenEditAreaDialog(Area area)
    {
        var parameters = new DialogParameters();
        parameters.Add("IsEditMode", true);
        parameters.Add("Area", area);

        var dialog = await DialogService.ShowAsync<CreateEditAreaDialog>($"Editar Área - {area.Nombre}", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshCurrentView();
        }
    }
}