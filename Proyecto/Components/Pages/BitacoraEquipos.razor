@page "/bitacora-equipos"
@rendermode InteractiveServer
@attribute [Authorize (Policy="AdminOnly")]
@using BD.Models
@using Proyecto.DTOS
@using Proyecto.Services
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@inject IBitacoraEquipoService BitacoraEquipoService
@inject ISnackbar Snackbar
@implements IDisposable

<PageTitle>Bitácora de Equipos</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudText Typo="Typo.h4" Class="mb-4">Bitácora de Equipos</MudText>

    <MudCard Class="mb-4">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="3">
                    <MudTextField @bind-Value="empleadoFilter" 
                                  Label="Buscar empleado" 
                                  Variant="Variant.Outlined" 
                                  Adornment="Adornment.End"
                                  AdornmentIcon="Icons.Material.Filled.Search"
                                  OnKeyUp="OnSearchKeyUp" />
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudTextField @bind-Value="equipoNombreFilter" 
                                  Label="Buscar equipo (nombre)" 
                                  Variant="Variant.Outlined" 
                                  Adornment="Adornment.End"
                                  AdornmentIcon="Icons.Material.Filled.Search"
                                  OnKeyUp="OnSearchKeyUp" />
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudTextField @bind-Value="equipoIdentificadorFilter" 
                                  Label="Buscar equipo (identificador)" 
                                  Variant="Variant.Outlined" 
                                  Adornment="Adornment.End"
                                  AdornmentIcon="Icons.Material.Filled.Search"
                                  OnKeyUp="OnSearchKeyUp" />
                </MudItem>
                <MudItem xs="12" md="2">
                    <MudSelect T="int" Value="pageSize" 
                               Label="Registros por página"
                               Variant="Variant.Outlined"
                               ValueChanged="OnPageSizeChanged">
                        <MudSelectItem Value="10">10</MudSelectItem>
                        <MudSelectItem Value="25">25</MudSelectItem>
                        <MudSelectItem Value="50">50</MudSelectItem>
                        <MudSelectItem Value="100">100</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="1">
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               StartIcon="Icons.Material.Filled.Search"
                               OnClick="SearchBitacora"
                               FullWidth="true">
                        Buscar
                    </MudButton>
                </MudItem>
            </MudGrid>

            <MudGrid Class="mt-3">
                <MudItem xs="12" md="3">
                    <MudSelect T="bool?" Value="asignadoFilter" 
                               Label="Estado de asignación"
                               Variant="Variant.Outlined"
                               ValueChanged="OnAsignadoFilterChanged">
                        <MudSelectItem T="bool?" Value="@((bool?)null)">Todos</MudSelectItem>
                        <MudSelectItem T="bool?" Value="@((bool?)true)">Asignado</MudSelectItem>
                        <MudSelectItem T="bool?" Value="@((bool?)false)">No asignado</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudDatePicker @bind-Date="fechaInicioFilter" 
                                   Label="Fecha desde"
                                   Variant="Variant.Outlined"
                                   @bind-Date:after="OnDateFilterChanged" />
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudDatePicker @bind-Date="fechaFinFilter" 
                                   Label="Fecha hasta"
                                   Variant="Variant.Outlined"
                                   @bind-Date:after="OnDateFilterChanged" />
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudButton Variant="Variant.Outlined" 
                               Color="Color.Secondary" 
                               StartIcon="Icons.Material.Filled.Clear"
                               OnClick="ClearFilters"
                               FullWidth="true">
                        Limpiar filtros
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    <MudCard>
        <MudCardContent>
            @if (isLoading)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
            }
            else
            {
                <div class="mb-3 d-flex justify-space-between align-center">
                    <MudText Typo="Typo.h6">
                        Mostrando @GetDisplayRange() de @totalRecords registros
                    </MudText>
                    <MudText Typo="Typo.body2" Class="text-muted">
                        Página @currentPage de @totalPages
                    </MudText>
                </div>
                
                <MudTable Items="@bitacoraEquipos" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm">
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Empleado</MudTh>
                        <MudTh>Equipo</MudTh>
                        <MudTh>Identificador</MudTh>
                        <MudTh>Fecha</MudTh>
                        <MudTh>Estado</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">
                            @context.Id
                        </MudTd>
                        <MudTd DataLabel="Empleado">
                            @if (context.IdEmpleadoNavigation != null)
                            {
                                <text>@GetEmpleadoNombreCompleto(context.IdEmpleadoNavigation)</text>
                            }
                            else
                            {
                                <MudChip T="string" Color="Color.Default" Size="Size.Small">
                                    Sin asignar
                                </MudChip>
                            }
                        </MudTd>
                        <MudTd DataLabel="Equipo">
                            @context.IdEquipoNavigation?.Nombre
                        </MudTd>
                        <MudTd DataLabel="Identificador">
                            @if (!string.IsNullOrEmpty(context.IdEquipoNavigation?.Identificador))
                            {
                                <MudChip T="string" Color="Color.Info" Size="Size.Small">
                                    @context.IdEquipoNavigation.Identificador
                                </MudChip>
                            }
                            else
                            {
                                <text>Sin identificador</text>
                            }
                        </MudTd>
                        <MudTd DataLabel="Fecha">
                            @if (context.FechaCommit.HasValue)
                            {
                                <text>@context.FechaCommit.Value.ToString("dd/MM/yyyy HH:mm")</text>
                            }
                            else
                            {
                                <text>Sin fecha</text>
                            }
                        </MudTd>
                        <MudTd DataLabel="Estado">
                            @if (context.IdEmpleado != null)
                            {
                                <MudChip T="string" Color="Color.Success" Size="Size.Small">
                                    Asignado
                                </MudChip>
                            }
                            else
                            {
                                <MudChip T="string" Color="Color.Warning" Size="Size.Small">
                                    No asignado
                                </MudChip>
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                
                @if (totalPages > 1)
                {
                    <div class="d-flex justify-center mt-4">
                        <MudPagination Count="totalPages" 
                                       Selected="currentPage"
                                       SelectedChanged="OnPageChanged"
                                       Size="Size.Medium"
                                       ShowFirstButton="true"
                                       ShowLastButton="true"
                                       ShowPreviousButton="true"
                                       ShowNextButton="true" />
                    </div>
                }
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private List<BitacoraEquipo> bitacoraEquipos = new();
    private bool isLoading = true;
    private CancellationTokenSource? _cancellationTokenSource;
    private bool _isRefreshing = false;
    
    // Filter properties
    private string empleadoFilter = "";
    private string equipoNombreFilter = "";
    private string equipoIdentificadorFilter = "";
    private bool? asignadoFilter = null;
    private DateTime? fechaInicioFilter = null;
    private DateTime? fechaFinFilter = null;
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalRecords = 0;
    private int totalPages = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadBitacoraEquipos();
    }

    private async Task LoadBitacoraEquipos()
    {
        await RefreshCurrentView();
    }

    private async Task SearchBitacora()
    {
        currentPage = 1; // Reset to first page when searching
        await RefreshCurrentView();
    }

    private async Task ClearFilters()
    {
        empleadoFilter = "";
        equipoNombreFilter = "";
        equipoIdentificadorFilter = "";
        asignadoFilter = null;
        fechaInicioFilter = null;
        fechaFinFilter = null;
        currentPage = 1;
        await LoadBitacoraEquipos();
    }
    
    private async Task OnPageChanged(int page)
    {
        if (currentPage != page)
        {
            currentPage = page;
            await RefreshCurrentView();
        }
    }
    
    private async Task OnPageSizeChanged(int newPageSize)
    {
        if (pageSize != newPageSize)
        {
            pageSize = newPageSize;
            currentPage = 1; // Reset to first page when page size changes
            await RefreshCurrentView();
        }
    }

    private async Task OnAsignadoFilterChanged(bool? newValue)
    {
        if (asignadoFilter != newValue)
        {
            asignadoFilter = newValue;
            currentPage = 1;
            await RefreshCurrentView();
        }
    }

    private async Task OnDateFilterChanged()
    {
        currentPage = 1;
        await RefreshCurrentView();
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchBitacora();
        }
    }
    
    private string GetDisplayRange()
    {
        if (totalRecords == 0) return "0";
        
        var start = (currentPage - 1) * pageSize + 1;
        var end = Math.Min(currentPage * pageSize, totalRecords);
        
        return $"{start}-{end}";
    }

    private async Task RefreshCurrentView()
    {
        if (_isRefreshing) return;
        
        _isRefreshing = true;
        isLoading = true;
        
        // Cancel any existing operation
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource = new CancellationTokenSource();
        
        try
        {
            var empleadoNombre = string.IsNullOrWhiteSpace(empleadoFilter) ? null : empleadoFilter.Trim();
            var equipoNombre = string.IsNullOrWhiteSpace(equipoNombreFilter) ? null : equipoNombreFilter.Trim();
            var equipoIdentificador = string.IsNullOrWhiteSpace(equipoIdentificadorFilter) ? null : equipoIdentificadorFilter.Trim();

            var result = await BitacoraEquipoService.GetBitacoraEquiposPagedAsync(
                currentPage, 
                pageSize, 
                empleadoNombre,
                equipoNombre,
                equipoIdentificador,
                asignadoFilter,
                fechaInicioFilter,
                fechaFinFilter);
                
            if (!_cancellationTokenSource.Token.IsCancellationRequested)
            {
                bitacoraEquipos = result.BitacoraEquipos;
                totalRecords = result.TotalCount;
                totalPages = (int)Math.Ceiling((double)totalRecords / pageSize);
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (OperationCanceledException)
        {
            // Operation was canceled, ignore
        }
        catch (ObjectDisposedException)
        {
            // Context was disposed, ignore
        }
        catch (Exception ex)
        {
            if (!_cancellationTokenSource.Token.IsCancellationRequested)
            {
                Snackbar.Add($"Error al cargar bitácora de equipos: {ex.Message}", Severity.Error);
            }
        }
        finally
        {
            isLoading = false;
            _isRefreshing = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private string GetEmpleadoNombreCompleto(Empleado empleado)
    {
        var nombres = new List<string>();
        
        if (!string.IsNullOrWhiteSpace(empleado.PrimerNombre))
            nombres.Add(empleado.PrimerNombre);
            
        if (!string.IsNullOrWhiteSpace(empleado.SegundoNombre))
            nombres.Add(empleado.SegundoNombre);
            
        if (!string.IsNullOrWhiteSpace(empleado.PrimerApellido))
            nombres.Add(empleado.PrimerApellido);
            
        if (!string.IsNullOrWhiteSpace(empleado.SegundoApellido))
            nombres.Add(empleado.SegundoApellido);
            
        return string.Join(" ", nombres);
    }

    public void Dispose()
    {
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource?.Dispose();
    }
}