@page "/causas"
@rendermode InteractiveServer
@attribute [Authorize(Policy="AdminOnly")]
@using BD.Models
@using Proyecto.DTOS
@using Proyecto.Services
@using Proyecto.Components.Dialogs
@inject ICausaService CausaService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Gestión de Causas</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudText Typo="Typo.h4" Class="mb-4">Gestión de Causas</MudText>

    <MudCard Class="mb-4">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="8" Class="d-flex align-center justify-start">
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Success" 
                               StartIcon="Icons.Material.Filled.Add"
                               OnClick="OpenCreateCausaDialog">
                        Nueva Causa
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" 
                               Color="Color.Secondary" 
                               StartIcon="Icons.Material.Filled.Refresh"
                               OnClick="LoadCausas"
                               Class="ml-2">
                        Actualizar
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    <MudCard>
        <MudCardContent>
            @if (isLoading)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
            }
            else
            {
                <div class="mb-3 d-flex justify-space-between align-center">
                    <MudText Typo="Typo.h6">
                        Total: @totalCount causas (Página @currentPage de @totalPages)
                    </MudText>
                    <div class="d-flex align-center gap-2">
                        <MudText Typo="Typo.body2">Mostrar:</MudText>
                        <MudSelect T="int" Value="pageSize" ValueChanged="OnPageSizeChanged" Dense="true" Style="min-width: 80px;">
                            <MudSelectItem Value="5">5</MudSelectItem>
                            <MudSelectItem Value="10">10</MudSelectItem>
                            <MudSelectItem Value="20">20</MudSelectItem>
                            <MudSelectItem Value="50">50</MudSelectItem>
                        </MudSelect>
                    </div>
                </div>
                
                <MudTable Items="@causas" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm">
                    <HeaderContent>
                        <MudTh>Nombre</MudTh>
                        <MudTh>Descripción</MudTh>
                        <MudTh>Acciones</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Nombre">
                            <MudText Typo="Typo.body1" Class="font-weight-bold">
                                @context.Nombre
                            </MudText>
                        </MudTd>
                        <MudTd DataLabel="Descripción">
                            @if (!string.IsNullOrEmpty(context.Descripcion))
                            {
                                <MudText Typo="Typo.body2" Class="text-wrap">
                                    @context.Descripcion
                                </MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.body2" Class="text-muted font-italic">
                                    Sin descripción
                                </MudText>
                            }
                        </MudTd>
                        <MudTd DataLabel="Acciones">
                            <MudButton Color="Color.Primary" 
                                       StartIcon="Icons.Material.Filled.Edit"
                                       OnClick="() => OpenEditCausaDialog(context)"
                                       Size="Size.Small"
                                       Variant="Variant.Outlined">
                                Editar
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                
                @if (totalPages > 1)
                {
                    <div class="d-flex justify-center mt-4">
                        <MudPagination 
                            Count="@totalPages" 
                            Selected="@currentPage"
                            SelectedChanged="OnPageChanged"
                            ShowFirstButton="true"
                            ShowLastButton="true"
                            ShowPreviousButton="true"
                            ShowNextButton="true"
                            Class="mud-pagination-outlined" />
                    </div>
                }
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private List<CausaDto> causas = new();
    private bool isLoading = true;
    private int totalCount = 0;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)totalCount / pageSize);
    
    private DialogOptions dialogOptions = new()
    {
        CloseOnEscapeKey = true,
        MaxWidth = MaxWidth.Medium,
        FullWidth = true
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadCausas();
    }

    private async Task LoadCausas()
    {
        isLoading = true;
        try
        {
            var result = await CausaService.GetCausasPagedAsync(currentPage, pageSize);
            causas = result.Items;
            totalCount = result.TotalCount;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar causas: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadCausas();
    }
    
    private async Task OnPageSizeChanged(int newPageSize)
    {
        pageSize = newPageSize;
        currentPage = 1;
        await LoadCausas();
    }
    
    // Create Causa Methods
    private async Task OpenCreateCausaDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("IsEditMode", false);

        var dialog = await DialogService.ShowAsync<CreateEditCausaDialog>("Crear Nueva Causa", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadCausas();
        }
    }
    
    // Edit Causa Methods
    private async Task OpenEditCausaDialog(CausaDto causa)
    {
        var parameters = new DialogParameters();
        parameters.Add("IsEditMode", true);
        parameters.Add("Causa", causa);

        var dialog = await DialogService.ShowAsync<CreateEditCausaDialog>($"Editar Causa - {causa.Nombre}", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadCausas();
        }
    }

}