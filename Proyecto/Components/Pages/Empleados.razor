@page "/empleados"
@rendermode InteractiveServer
@attribute [Authorize(Policy="AdminOnly")]
@using BD.Models
@using Proyecto.DTOS
@using Proyecto.Services
@using Proyecto.Components.Dialogs
@using System.ComponentModel.DataAnnotations
@inject IEmpleadoService EmpleadoService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Gestión de Empleados</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudText Typo="Typo.h4" Class="mb-4">Gestión de Empleados</MudText>

    <MudCard Class="mb-4">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="4">
                    <MudTextField @bind-Value="searchTerm" 
                                  Label="Buscar por nombre, área o usuario" 
                                  Variant="Variant.Outlined" 
                                  Adornment="Adornment.End"
                                  AdornmentIcon="Icons.Material.Filled.Search"
                                  OnAdornmentClick="SearchEmpleados"
                                  OnKeyUp="OnSearchKeyUp" />
                </MudItem>
                <MudItem xs="12" md="2">
                    <MudSelect T="int" Value="pageSize" 
                               Label="Registros por página"
                               Variant="Variant.Outlined"
                               ValueChanged="OnPageSizeChanged">
                        <MudSelectItem Value="10">10</MudSelectItem>
                        <MudSelectItem Value="25">25</MudSelectItem>
                        <MudSelectItem Value="50">50</MudSelectItem>
                        <MudSelectItem Value="100">100</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6" Class="d-flex align-center justify-space-between">
                    <div>
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   StartIcon="Icons.Material.Filled.Search"
                                   OnClick="SearchEmpleados">
                            Buscar
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Secondary" 
                                   StartIcon="Icons.Material.Filled.Clear"
                                   OnClick="ClearSearch"
                                   Class="ml-2">
                            Limpiar
                        </MudButton>
                    </div>
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Success" 
                               StartIcon="Icons.Material.Filled.Add"
                               OnClick="OpenCreateEmpleadoDialog"
                               Class="ml-4">
                        Nuevo Empleado
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    <MudCard>
        <MudCardContent>
            @if (isLoading)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
            }
            else
            {
                <div class="mb-3 d-flex justify-space-between align-center">
                    <MudText Typo="Typo.h6">
                        Mostrando @GetDisplayRange() de @totalEmpleados empleados
                    </MudText>
                    <MudText Typo="Typo.body2" Class="text-muted">
                        Página @currentPage de @totalPages
                    </MudText>
                </div>
                
                <MudTable Items="@empleados" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm">
                    <HeaderContent>
                        <MudTh>Nombre Completo</MudTh>
                        <MudTh>Área</MudTh>
                        <MudTh>Usuario</MudTh>
                        <MudTh>Estado</MudTh>
                        <MudTh>Acciones</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Nombre Completo">
                            @($"{context.PrimerNombre} {context.SegundoNombre} {context.PrimerApellido} {context.SegundoApellido}")
                        </MudTd>
                        <MudTd DataLabel="Área">
                            @if (context.IdAreaNavigation != null)
                            {
                                <MudChip T="string" Color="Color.Info" Size="Size.Small">
                                    @context.IdAreaNavigation.Nombre
                                </MudChip>
                            }
                            else
                            {
                                <MudChip T="string" Color="Color.Default" Size="Size.Small">
                                    Sin área asignada
                                </MudChip>
                            }
                        </MudTd>
                        <MudTd DataLabel="Usuario">
                            @if (context.IdUsuarioNavigation != null)
                            {
                                <text>@context.IdUsuarioNavigation.Usuario1</text>
                            }
                            else
                            {
                                <text>Sin usuario</text>
                            }
                        </MudTd>
                        <MudTd DataLabel="Estado">
                            <MudChip T="string" 
                                     Color="@GetEstadoColor(context.Estado)" 
                                     Size="Size.Small">
                                @GetEstadoText(context.Estado)
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Acciones">
                            <MudButton Color="Color.Primary" 
                                       StartIcon="Icons.Material.Filled.Edit"
                                       OnClick="() => OpenEditEmpleadoDialog(context)"
                                       Size="Size.Small"
                                       Variant="Variant.Outlined">
                                Editar
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                
                @if (totalPages > 1)
                {
                    <div class="d-flex justify-center mt-4">
                        <MudPagination Count="totalPages" 
                                       Selected="currentPage"
                                       SelectedChanged="OnPageChanged"
                                       Size="Size.Medium"
                                       ShowFirstButton="true"
                                       ShowLastButton="true"
                                       ShowPreviousButton="true"
                                       ShowNextButton="true" />
                    </div>
                }
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private List<Empleado> empleados = new();
    private bool isLoading = true;
    private string searchTerm = "";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalEmpleados = 0;
    private int totalPages = 0;
    
    private DialogOptions dialogOptions = new()
    {
        CloseOnEscapeKey = true,
        MaxWidth = MaxWidth.Medium,
        FullWidth = true
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadEmpleados();
    }

    private async Task LoadEmpleados()
    {
        await RefreshCurrentView();
    }

    private async Task SearchEmpleados()
    {
        currentPage = 1; // Reset to first page when searching
        await RefreshCurrentView();
    }

    private async Task ClearSearch()
    {
        searchTerm = "";
        currentPage = 1;
        await LoadEmpleados();
    }
    
    private async Task OnPageChanged(int page)
    {
        if (currentPage != page)
        {
            currentPage = page;
            await RefreshCurrentView();
        }
    }
    
    private async Task OnPageSizeChanged(int newPageSize)
    {
        if (pageSize != newPageSize)
        {
            pageSize = newPageSize;
            currentPage = 1; // Reset to first page when page size changes
            await RefreshCurrentView();
        }
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchEmpleados();
        }
    }
    
    private string GetDisplayRange()
    {
        if (totalEmpleados == 0) return "0";
        
        var start = (currentPage - 1) * pageSize + 1;
        var end = Math.Min(currentPage * pageSize, totalEmpleados);
        
        return $"{start}-{end}";
    }

    private async Task RefreshCurrentView()
    {
        isLoading = true;
        try
        {
            var result = await EmpleadoService.GetEmpleadosPagedAsync(currentPage, pageSize, searchTerm);
            empleados = result.Empleados;
            totalEmpleados = result.TotalCount;
            totalPages = (int)Math.Ceiling((double)totalEmpleados / pageSize);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar empleados: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    // Create Empleado Methods
    private async Task OpenCreateEmpleadoDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("IsEditMode", false);

        var dialog = await DialogService.ShowAsync<CreateEditEmpleadoDialog>("Crear Nuevo Empleado", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshCurrentView();
        }
    }
    
    // Edit Empleado Methods
    private async Task OpenEditEmpleadoDialog(Empleado empleado)
    {
        var parameters = new DialogParameters();
        parameters.Add("IsEditMode", true);
        parameters.Add("Empleado", empleado);

        var dialog = await DialogService.ShowAsync<CreateEditEmpleadoDialog>($"Editar Empleado - {empleado.PrimerNombre} {empleado.PrimerApellido}", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshCurrentView();
        }
    }


    private Color GetEstadoColor(string? estado)
    {
        return estado?.ToLower() switch
        {
            "activo" => Color.Success,
            "inactivo" => Color.Error,
            "vacaciones" => Color.Warning,
            _ => Color.Default
        };
    }

    private string GetEstadoText(string? estado)
    {
        if (string.IsNullOrEmpty(estado)) return "Sin estado";
        return char.ToUpper(estado[0]) + estado.Substring(1);
    }
}